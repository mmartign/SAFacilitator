/*
 * Copyright (C) 2019 Spazio IT - Soluzioni Informatiche.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with This program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 * 
 * This work has been funded by the European Space Agency
 * Contract # RFP/3-15558/18/NL/FE/as 
 */
package com.spazioit.safacilitator.functions;

import com.spazioit.safacilitator.SAFacilitator;
import com.spazioit.safacilitator.gui.MainFrame;
import com.spazioit.safacilitator.model.Project;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.Calendar;
import java.util.Collection;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Maurizio Martignano
 */
public class PreprocessingFunctions {

    private SAFacilitator safacilitator = null;
    
    private String COMP_DEFINES_BAT = "comp_defines.bat";
    private String COMP_DEFINES_SH = "comp_defines.sh";    
    private String EMPTY = "__empty.h";
    private String COMP_DEFINES = "__comp_defines.h";

    public PreprocessingFunctions(SAFacilitator safacilitator) {
        this.safacilitator = safacilitator;
    }

    /**
     * @throws Exception in case of application error prepare Preprocessing
     */
    public void preparePreprocess() throws Exception {
        CommonFunctions.printLogMessage("Preparing Preprocessing...");
        Project p = safacilitator.currentProject;
        if (p == null) {
            throw new Exception("Current Project is null. Initialize it first!");
        }
        if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
            String fileName = p.getBaseDirectory() + "/" + p.getProjectName() + "_prepro.bat";
            FileWriter fw = new FileWriter(fileName);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write("@echo off");
            bw.newLine();
            bw.write("REM  PREPRO launch script for project " + p.getProjectName());
            bw.newLine();
            bw.write("REM  Generated by SAFacilitator at " + Calendar.getInstance().getTime());
            bw.newLine();
            bw.write("REM  Copyright (C) " + Calendar.getInstance().get(Calendar.YEAR) + " - Spazio IT - https://www.spazioit.com");
            bw.newLine();
            bw.newLine();
            bw.write("cd " + p.getBaseDirectory());
            bw.newLine();
            bw.write("echo PREPRO running > PREPRO.running");
            bw.newLine();
            for (int i = 0; i < p.getpFiles().size(); i++) {
                bw.write("if exist PREPRO.running (");
                bw.newLine();
                bw.write(p.getpFiles().get(i).getPfOriginalBuilder() + " ");
                for (int j = 0; j < p.getpFiles().get(i).getPfDefines().size(); j++) {
                    bw.write(p.getpFiles().get(i).getPfDefines().get(j));
                    bw.write(" ");
                }
                for (int j = 0; j < p.getpFiles().get(i).getPfAdditionalArguments().size(); j++) {
                    bw.write(p.getpFiles().get(i).getPfAdditionalArguments().get(j));
                    bw.write(" ");
                }
                for (int j = 0; j < p.getpFiles().get(i).getPfIncludeDirectories().size(); j++) {
                    if (p.getpFiles().get(i).getPfIncludeDirectories().get(j).startsWith("/")
                            || p.getpFiles().get(i).getPfIncludeDirectories().get(j).startsWith("C:")
                            || p.getpFiles().get(i).getPfIncludeDirectories().get(j).startsWith("c:")) {
                        bw.write("-I" + p.getpFiles().get(i).getPfIncludeDirectories().get(j));
                    } else {
                        bw.write("-I" + p.getBaseDirectory() + "/" + p.getpFiles().get(i).getPfIncludeDirectories().get(j));
                    }
                    bw.write(" ");
                }
                bw.write(" -E " + p.getpFiles().get(i).getPfFileName() + " > " + p.getpFiles().get(i).getPfFileName().replace(p.getBaseDirectory(), p.getExplodedDirectory()));
                bw.newLine();
                bw.write(")");
                bw.newLine();
            }
            bw.write("del /F /Q PREPRO.running");
            bw.newLine();
            bw.newLine();
            bw.flush();
            bw.close();
        } else {
            String fileName = p.getBaseDirectory() + "/" + p.getProjectName() + "_prepro.sh";
            FileWriter fw = new FileWriter(fileName);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write("# !/bin/bash");
            bw.newLine();
            bw.write("#  PREPRO launch script for project " + p.getProjectName());
            bw.newLine();
            bw.write("#  Generated by SAFacilitator at " + Calendar.getInstance().getTime());
            bw.newLine();
            bw.write("#  Copyright (C) " + Calendar.getInstance().get(Calendar.YEAR) + " - Spazio IT - https://www.spazioit.com");
            bw.newLine();
            bw.newLine();
            bw.write("cd " + p.getBaseDirectory());
            bw.newLine();
            bw.write("echo PREPRO running > PREPRO.running");
            bw.newLine();
            for (int i = 0; i < p.getpFiles().size(); i++) {
                bw.write("if [ -f PREPRO.running ]; then");
                bw.newLine();
                bw.write(p.getpFiles().get(i).getPfOriginalBuilder() + " ");
                for (int j = 0; j < p.getpFiles().get(i).getPfDefines().size(); j++) {
                    bw.write(p.getpFiles().get(i).getPfDefines().get(j));
                    bw.write(" ");
                }
                for (int j = 0; j < p.getpFiles().get(i).getPfAdditionalArguments().size(); j++) {
                    bw.write(p.getpFiles().get(i).getPfAdditionalArguments().get(j));
                    bw.write(" ");
                }
                for (int j = 0; j < p.getpFiles().get(i).getPfIncludeDirectories().size(); j++) {
                    if (p.getpFiles().get(i).getPfIncludeDirectories().get(j).startsWith("/")
                            || p.getpFiles().get(i).getPfIncludeDirectories().get(j).startsWith("C:")
                            || p.getpFiles().get(i).getPfIncludeDirectories().get(j).startsWith("c:")) {
                        bw.write("-I" + p.getpFiles().get(i).getPfIncludeDirectories().get(j));
                    } else {
                        bw.write("-I" + p.getBaseDirectory() + "/" + p.getpFiles().get(i).getPfIncludeDirectories().get(j));
                    }
                    bw.write(" ");
                }
                bw.write(" -E " + p.getpFiles().get(i).getPfFileName() + " > " + p.getpFiles().get(i).getPfFileName().replace(p.getBaseDirectory(), p.getExplodedDirectory()));
                bw.newLine();
                bw.write("fi");
                bw.newLine();
            }
            bw.write("rm -f PREPRO.running");
            bw.newLine();
            bw.newLine();
            bw.flush();
            bw.close();
        }
        CommonFunctions.printLogMessage("Preproccesing prepared.");
    }

    /**
     * @throws Exception in case of application error Execute Preprocessing
     */
    public void preProcess() throws Exception {
        if (safacilitator.currentProject == null) {
            throw new Exception("Current Project is null. Initialize it first!");
        }
        Project p = safacilitator.currentProject;
        if (p.getBaseDirectory() == null || p.getBaseDirectory().equals("")) {
            throw new Exception("Project Base Directory cannot be null!");
        }
        if (p.getExplodedDirectory() == null || p.getExplodedDirectory().equals("")) {
            throw new Exception("Project Exploded Directory cannot be null!");
        }
        CommonFunctions.printLogMessage("Deleting Exploded Directory...");
        Collection<File> files = null;
        do {
            files = FileUtils.listFiles(new File(p.getExplodedDirectory()), null, true);
            for (File file : files) {
                FileUtils.deleteQuietly(file);
            }
        } while (files != null && files.size() > 0);
        CommonFunctions.printLogMessage("Exploded Directory Deleted.");
        CommonFunctions.printLogMessage("Copying Base Directory into Exploded Directory...");
        FileUtils.copyDirectory(new File(p.getBaseDirectory()), new File(p.getExplodedDirectory()), true);
        CommonFunctions.printLogMessage("Base Directory Copied into Exploded Directory.");
        CommonFunctions.printLogMessage("Executing Preprocessing...");
        String commandLine = null;
        if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
            commandLine = p.getBaseDirectory() + "/" + p.getProjectName() + "_prepro.bat";
        } else {
            commandLine = "bash " + p.getBaseDirectory() + "/" + p.getProjectName() + "_prepro.sh";
        }
        if (SAFacilitator.guiEnabled) {
            MainFrame.stopRunningMenuItem.setText("Stop Preprocessing Execution");
            MainFrame.stopRunningMenuItem.setDisable(false);
        }
        Executor executor = new Executor(commandLine, "Preprocessing executed.", true);
        executor.setPriority(Thread.MAX_PRIORITY);
        executor.start();
        if (!SAFacilitator.guiEnabled) {
            executor.join();
        }
    }

    /**
     * @throws Exception in case of application error Show Compiler Defines
     */
    public void showCompilerDefines() throws Exception {
        if (safacilitator.currentProject == null) {
            throw new Exception("Current Project is null. Initialize it first!");
        }
        Project p = safacilitator.currentProject;
        if (p.getBaseDirectory() == null || p.getBaseDirectory().equals("")) {
            throw new Exception("Project Base Directory cannot be null!");
        }
        if (p.getOrigBuilders() == null || p.getOrigBuilders().size() == 0) {
            throw new Exception("Current project is missing the list of original builders.");
        }
        CommonFunctions.printLogMessage("Showing Compiler Defines...");
        String commandLine = null;
        String fileName = null;
        FileWriter fw = null;
        BufferedWriter bw = null;
        if (System.getProperty("os.name").toLowerCase().startsWith("windows")) {
            fileName = p.getBaseDirectory() + "/" + COMP_DEFINES_BAT;
            fw = new FileWriter(fileName);
            bw = new BufferedWriter(fw);
            bw.write("@echo off");
            bw.newLine();
            bw.write("REM  Compiler command to get its predefined defines");
            bw.newLine();
            bw.write("REM  Generated by SAFacilitator at "  + Calendar.getInstance().getTime()); 
            bw.newLine();
            bw.write("REM  Copyright (C) " + Calendar.getInstance().get(Calendar.YEAR) +  " - Spazio IT - https://www.spazioit.com");
            bw.newLine();
            bw.newLine();
            bw.write("cd " + p.getBaseDirectory());
            bw.newLine();
            bw.write("echo. > " + EMPTY);
            bw.newLine();
            bw.write("echo /* C Defines */ > " + COMP_DEFINES);
            bw.newLine();
            bw.write(p.getOrigBuilders().get(0) + " -dM -E -x c " + EMPTY + " >> " + COMP_DEFINES);
            bw.newLine();
            bw.write("echo. >> " + COMP_DEFINES);
            bw.newLine();
            bw.write("echo /* C++ Defines */ >> " + COMP_DEFINES);
            bw.newLine();
            bw.write(p.getOrigBuilders().get(0) + " -dM -E -x c++ " + EMPTY + " >> " + COMP_DEFINES);
            bw.newLine();
            bw.write("echo. >> " + COMP_DEFINES);
            bw.newLine();
            bw.write("type " + COMP_DEFINES);
            bw.newLine();
            bw.newLine();
            bw.flush();
            bw.close();
            commandLine = fileName;
        } else {
            fileName = p.getBaseDirectory() + "/" + COMP_DEFINES_SH;
            fw = new FileWriter(fileName);
            bw = new BufferedWriter(fw);
            bw.write("# !/bin/bash");
            bw.newLine();
            bw.write("#  Compiler command to get its predefined defines");
            bw.newLine();
            bw.write("#  Generated by SAFacilitator at "  + Calendar.getInstance().getTime()); 
            bw.newLine();
            bw.write("#  Copyright (C) " + Calendar.getInstance().get(Calendar.YEAR) +  " - Spazio IT - https://www.spazioit.com");
            bw.newLine();
            bw.newLine();
            bw.write("cd " + p.getBaseDirectory());
            bw.newLine();
            bw.write("echo > " + EMPTY);
            bw.newLine();
            bw.write("echo \"/* C Defines */\" > " + COMP_DEFINES);
            bw.newLine();
            bw.write(p.getOrigBuilders().get(0) + " -dM -E -x c " + EMPTY + " >> " + COMP_DEFINES);
            bw.newLine();
            bw.write("echo >> " + COMP_DEFINES);
            bw.newLine();
            bw.write("echo \"/* C++ Defines */\" >> " + COMP_DEFINES);
            bw.newLine();
            bw.write(p.getOrigBuilders().get(0) + " -dM -E -x c++ " + EMPTY + " >> " + COMP_DEFINES);
            bw.newLine();
            bw.write("echo >> " + COMP_DEFINES);
            bw.newLine();
            bw.write("cat " + COMP_DEFINES);
            bw.newLine();
            bw.newLine();
            bw.flush();
            bw.close();
            commandLine = "bash " + fileName;
        }
        if (SAFacilitator.guiEnabled) {
            MainFrame.stopRunningMenuItem.setText("Stop Show Compiler Defines");
            MainFrame.stopRunningMenuItem.setDisable(false);
        }
        Executor executor = new Executor(commandLine, "Defines Shown.", false);
        executor.setPriority(Thread.MAX_PRIORITY);
        executor.start();
        if (!SAFacilitator.guiEnabled) {
            executor.join();
        }
    }
}
